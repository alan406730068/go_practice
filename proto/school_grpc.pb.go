// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: school.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StudentServer_GetStudentData_FullMethodName = "/student.StudentServer/GetStudentData"
)

// StudentServerClient is the client API for StudentServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentServerClient interface {
	GetStudentData(ctx context.Context, in *GetStudentDataReq, opts ...grpc.CallOption) (*GetStudentDataRes, error)
}

type studentServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServerClient(cc grpc.ClientConnInterface) StudentServerClient {
	return &studentServerClient{cc}
}

func (c *studentServerClient) GetStudentData(ctx context.Context, in *GetStudentDataReq, opts ...grpc.CallOption) (*GetStudentDataRes, error) {
	out := new(GetStudentDataRes)
	err := c.cc.Invoke(ctx, StudentServer_GetStudentData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServerServer is the server API for StudentServer service.
// All implementations should embed UnimplementedStudentServerServer
// for forward compatibility
type StudentServerServer interface {
	GetStudentData(context.Context, *GetStudentDataReq) (*GetStudentDataRes, error)
}

// UnimplementedStudentServerServer should be embedded to have forward compatible implementations.
type UnimplementedStudentServerServer struct {
}

func (UnimplementedStudentServerServer) GetStudentData(context.Context, *GetStudentDataReq) (*GetStudentDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentData not implemented")
}

// UnsafeStudentServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServerServer will
// result in compilation errors.
type UnsafeStudentServerServer interface {
	mustEmbedUnimplementedStudentServerServer()
}

func RegisterStudentServerServer(s grpc.ServiceRegistrar, srv StudentServerServer) {
	s.RegisterService(&StudentServer_ServiceDesc, srv)
}

func _StudentServer_GetStudentData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServerServer).GetStudentData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentServer_GetStudentData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServerServer).GetStudentData(ctx, req.(*GetStudentDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentServer_ServiceDesc is the grpc.ServiceDesc for StudentServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student.StudentServer",
	HandlerType: (*StudentServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentData",
			Handler:    _StudentServer_GetStudentData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "school.proto",
}
